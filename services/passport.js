const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');

// serialize and deserialize user to create code for cookie to send to client side.
// user is the user returned (exisiting or new) from the callback in the strategy
passport.serializeUser((user, done) => {
	// user.id is an id generated by mongodb, NOT the google id because there could be multiple ways of Oauth
	// first param of done() is error, but null because simple operation has no errors.
	done(null, user.id);
});

passport.deserializeUser((id, done) => {
	// query for user with id
	User.findById(id).then(user => {
		done(null, user);
	});
});



// Creates a new instance of Google Strategy. Pass in config in instance to create how users login.
passport.use(
	new GoogleStrategy(
		{
			clientID: keys.googleClientID,
			clientSecret: keys.googleClientSecret,
			callbackURL: '/auth/google/callback'
		},
		(accessToken, refreshToken, profile, done) => {
			User.findOne({ googleID: profile.id }).then(exisitingUser => {
				if (exisitingUser) {
					done(null, exisitingUser);
				} else {
					new User({ googleID: profile.id })
						.save()
						.then(user => done(null, user));
				}
			});
		}
	)
);
